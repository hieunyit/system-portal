definitions:
  dto.AuditResponse:
    properties:
      action:
        type: string
      id:
        type: string
      resource:
        type: string
      success:
        type: boolean
      userId:
        type: string
    type: object
  dto.BulkGroupOperationResult:
    properties:
      error:
        example: ""
        type: string
      groupName:
        example: TEST_GROUP
        type: string
      message:
        example: Group created successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.BulkUserOperationResult:
    properties:
      error:
        example: ""
        type: string
      message:
        example: User created successfully
        type: string
      success:
        example: true
        type: boolean
      username:
        example: testuser
        type: string
    type: object
  dto.ConnectedUserResponse:
    properties:
      bytes_received:
        example: 1048576
        type: integer
      bytes_sent:
        example: 2097152
        type: integer
      client_id:
        example: "5"
        type: string
      common_name:
        example: user123
        type: string
      connected_since:
        example: "2025-06-14T14:30:25Z"
        type: string
      connected_since_unix:
        example: 1749910225
        type: integer
      connection_duration:
        example: 37m41s
        type: string
      country:
        example: Vietnam
        type: string
      data_channel_cipher:
        example: AES-256-GCM
        type: string
      peer_id:
        example: "12"
        type: string
      real_address:
        example: 203.113.45.123
        type: string
      username:
        example: user123
        type: string
      virtual_address:
        example: 172.27.232.15
        type: string
      virtual_ipv6_address:
        example: ""
        type: string
    type: object
  dto.CreateGroupRequest:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        type: string
      groupName:
        maxLength: 50
        minLength: 3
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        enum:
        - User
        - Admin
        type: string
    required:
    - authMethod
    - groupName
    type: object
  dto.CreateUserRequest:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      ipAddress:
        example: 10.0.0.10
        type: string
      ipAssignMode:
        enum:
        - dynamic
        - static
        example: static
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      password:
        example: SecurePass123!
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        maxLength: 30
        minLength: 3
        type: string
    required:
    - authMethod
    - email
    - ipAssignMode
    - macAddresses
    - userExpiration
    - username
    type: object
  dto.FilterMetadata:
    properties:
      appliedFilters:
        description: List of applied filters
        example:
        - username
        - authMethod
        - isEnabled
        items:
          type: string
        type: array
      filterCount:
        description: Number of active filters
        example: 3
        type: integer
      sortOrder:
        description: Current sort order
        example: asc
        type: string
      sortedBy:
        description: Current sort field
        example: username
        type: string
    type: object
  dto.GroupResponse:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      denyAccess:
        type: boolean
      groupName:
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        type: string
    type: object
  dto.ImportValidationError:
    properties:
      field:
        example: email
        type: string
      message:
        example: Invalid email format
        type: string
      row:
        example: 3
        type: integer
      value:
        example: invalid-email
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.PortalUserRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      groupId:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  dto.PortalUserUpdateRequest:
    properties:
      fullName:
        type: string
      groupId:
        type: string
      password:
        type: string
    type: object
  dto.PortalUserResponse:
    properties:
      email:
        type: string
      fullName:
        type: string
      groupId:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      username:
        type: string
    type: object
  dto.RefreshRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.StatsResponse:
    properties:
      users:
        type: integer
    type: object
  dto.TokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.UserConnectionInfo:
    properties:
      connected_since:
        example: "2025-06-14T14:30:25Z"
        type: string
      country:
        example: Vietnam
        type: string
      real_address:
        example: 203.113.45.123
        type: string
      username:
        example: testuser1
        type: string
      virtual_address:
        example: 172.27.232.15
        type: string
    type: object
  dto.UserExpirationInfo:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      daysUntilExpiry:
        description: Số ngày còn lại
        type: integer
      denyAccess:
        type: boolean
      email:
        type: string
      expirationStatus:
        description: '"expired", "expiring", "warning"'
        type: string
      groupName:
        type: string
      macAddresses:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        type: string
      userExpiration:
        type: string
      username:
        type: string
    type: object
  dto.UserFilter:
    properties:
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      caseSensitive:
        description: Case sensitive search
        example: false
        type: boolean
      denyAccess:
        description: Filter by access denial status
        example: false
        type: boolean
      email:
        example: test@example.com
        type: string
      exactMatch:
        description: 'NEW: Search options'
        example: false
        type: boolean
      expiringInDays:
        description: Users expiring within X days
        example: 7
        minimum: 0
        type: integer
      groupName:
        example: TEST_GR
        type: string
      hasAccessControl:
        description: 'NEW: Advanced filters'
        example: true
        type: boolean
      includeExpired:
        description: Include expired users
        example: true
        type: boolean
      ipAddress:
        example: 10.10.10.10
        type: string
      isEnabled:
        description: 'NEW: Status filters'
        example: true
        type: boolean
      limit:
        example: 20
        maximum: 100
        minimum: 1
        type: integer
      macAddress:
        description: Filter by MAC address
        example: 5E:CD:C9:D4:88:65
        type: string
      mfaEnabled:
        description: Filter by MFA status
        example: true
        type: boolean
      page:
        example: 1
        minimum: 1
        type: integer
      role:
        enum:
        - Admin
        - User
        example: User
        type: string
      searchText:
        description: Search across username, email, group
        example: john
        minLength: 2
        type: string
      sortBy:
        description: Enhanced sorting & pagination
        enum:
        - username
        - email
        - authMethod
        - role
        - groupName
        - userExpiration
        example: username
        type: string
      sortOrder:
        enum:
        - asc
        - desc
        example: asc
        type: string
      userExpirationAfter:
        description: 'NEW: Expiration filters'
        example: "2025-06-17"
        type: string
      userExpirationBefore:
        description: Users expiring before date
        example: "2025-06-22"
        type: string
      username:
        description: Basic filters (existing)
        example: testuser
        type: string
    type: object
  dto.UserResponse:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        example: local
        type: string
      daysUntilExpiration:
        description: Days until expiration (-1 if expired)
        example: 30
        type: integer
      denyAccess:
        example: false
        type: boolean
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      ipAddress:
        example: 10.0.0.10
        type: string
      isEnabled:
        description: 'NEW: Computed fields for enhanced filtering'
        example: true
        type: boolean
      isExpired:
        description: Whether user is past expiration
        example: false
        type: boolean
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      mfa:
        example: true
        type: boolean
      role:
        example: User
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        type: string
    type: object
  dto.UserValidationError:
    properties:
      error:
        example: User is not currently connected
        type: string
      username:
        example: testuser1
        type: string
    type: object
  dto.VpnBulkActionResponse:
    properties:
      failed:
        example: 2
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkUserOperationResult'
        type: array
      success:
        example: 8
        type: integer
      total:
        example: 10
        type: integer
    type: object
  dto.VpnBulkCreateGroupsRequest:
    properties:
      groups:
        items:
          $ref: '#/definitions/dto.CreateGroupRequest'
        maxItems: 50
        minItems: 1
        type: array
    required:
    - groups
    type: object
  dto.VpnBulkCreateGroupsResponse:
    properties:
      failed:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkGroupOperationResult'
        type: array
      success:
        example: 4
        type: integer
      total:
        example: 5
        type: integer
    type: object
  dto.VpnBulkCreateUsersRequest:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.CreateUserRequest'
        maxItems: 100
        minItems: 1
        type: array
    required:
    - users
    type: object
  dto.VpnBulkCreateUsersResponse:
    properties:
      failed:
        example: 2
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkUserOperationResult'
        type: array
      success:
        example: 8
        type: integer
      total:
        example: 10
        type: integer
    type: object
  dto.VpnBulkDisconnectUsersRequest:
    properties:
      message:
        example: Maintenance disconnect
        maxLength: 200
        type: string
      usernames:
        example:
        - '["testuser1"'
        - ' "testuser2"]'
        items:
          type: string
        minItems: 1
        type: array
    required:
    - usernames
    type: object
  dto.VpnBulkGroupActionResponse:
    properties:
      failed:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkGroupOperationResult'
        type: array
      success:
        example: 4
        type: integer
      total:
        example: 5
        type: integer
    type: object
  dto.VpnBulkGroupActionsRequest:
    properties:
      action:
        enum:
        - enable
        - disable
        type: string
      groupNames:
        items:
          type: string
        maxItems: 50
        minItems: 1
        type: array
    required:
    - action
    - groupNames
    type: object
  dto.VpnBulkUserActionsRequest:
    properties:
      action:
        enum:
        - enable
        - disable
        - reset-otp
        type: string
      usernames:
        items:
          type: string
        maxItems: 100
        minItems: 1
        type: array
    required:
    - action
    - usernames
    type: object
  dto.VpnBulkUserExtendRequest:
    properties:
      newExpiration:
        type: string
      usernames:
        items:
          type: string
        maxItems: 100
        minItems: 1
        type: array
    required:
    - newExpiration
    - usernames
    type: object
  dto.VpnChangePasswordRequest:
    properties:
      password:
        example: NewSecurePass123!
        minLength: 8
        type: string
    required:
    - password
    type: object
  dto.VpnCreateGroupRequest:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        type: string
      groupName:
        maxLength: 50
        minLength: 3
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        enum:
        - User
        - Admin
        type: string
    required:
    - authMethod
    - groupName
    type: object
  dto.VpnCreateUserRequest:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      ipAddress:
        example: 10.0.0.10
        type: string
      ipAssignMode:
        enum:
        - dynamic
        - static
        example: static
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      password:
        example: SecurePass123!
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        maxLength: 30
        minLength: 3
        type: string
    required:
    - authMethod
    - email
    - ipAssignMode
    - macAddresses
    - userExpiration
    - username
    type: object
  dto.VpnDisconnectResponse:
    properties:
      connection_info:
        $ref: '#/definitions/dto.UserConnectionInfo'
      count:
        example: 2
        type: integer
      disconnected_users:
        example:
        - '["testuser1"'
        - ' "testuser2"]'
        items:
          type: string
        type: array
      message:
        example: Users disconnected successfully
        type: string
      skipped_users:
        example:
        - '["offline_user"]'
        items:
          type: string
        type: array
      success:
        example: true
        type: boolean
      total_requested:
        example: 3
        type: integer
      validation_errors:
        items:
          $ref: '#/definitions/dto.UserValidationError'
        type: array
    type: object
  dto.VpnDisconnectUserRequest:
    properties:
      message:
        example: Session terminated by administrator
        maxLength: 200
        type: string
    type: object
  dto.VpnGroupListResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/dto.GroupResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  dto.VpnGroupResponse:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      denyAccess:
        type: boolean
      groupName:
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        type: string
    type: object
  dto.VpnImportResponse:
    properties:
      dryRun:
        example: false
        type: boolean
      failureCount:
        example: 5
        type: integer
      invalidRecords:
        example: 5
        type: integer
      processedRecords:
        example: 95
        type: integer
      results:
        description: BulkCreateUsersResponse or BulkCreateGroupsResponse
      successCount:
        example: 90
        type: integer
      total:
        example: 100
        type: integer
      validRecords:
        example: 95
        type: integer
      validationErrors:
        items:
          $ref: '#/definitions/dto.ImportValidationError'
        type: array
    type: object
  dto.VpnNetworkConfigResponse:
    properties:
      allow_private_nets_to_clients:
        description: Advanced Network Settings
        example: true
        type: boolean
      allow_private_nets6_to_clients:
        example: true
        type: boolean
      client_netmask_bits:
        example: "20"
        type: string
      client_network:
        description: Client Network Settings
        example: 172.27.224.0
        type: string
      group_pool:
        example: 172.27.240.0/20
        type: string
      inter_client:
        example: false
        type: boolean
      listen_ip:
        example: all
        type: string
      message:
        example: Network config retrieved successfully
        type: string
      mss_fix:
        example: "1350"
        type: string
      mtu:
        description: Network Performance
        example: "1420"
        type: string
      nat_enabled:
        description: NAT Settings
        example: true
        type: boolean
      nat_masquerade:
        example: false
        type: boolean
      nat6_enabled:
        example: true
        type: boolean
      nat6_masquerade:
        example: false
        type: boolean
      osi_layer:
        example: "3"
        type: string
      private_access:
        example: "no"
        type: string
      protocol:
        example: tcp
        type: string
      reroute_dns:
        example: true
        type: boolean
      reroute_gateway:
        description: Routing Settings
        example: true
        type: boolean
      server_ip:
        example: all
        type: string
      status:
        description: Status
        example: optimal
        type: string
      tcp_port:
        description: VPN Daemon Settings
        example: "443"
        type: string
      udp_port:
        example: "1194"
        type: string
    type: object
  dto.VpnServerInfoResponse:
    properties:
      admin_ip_address:
        example: all
        type: string
      admin_port:
        example: "943"
        type: string
      client_ip_address:
        example: all
        type: string
      client_port:
        example: "943"
        type: string
      cluster_mode:
        example: "False"
        type: string
      failover_mode:
        example: none
        type: string
      license_server:
        example: licensing.openvpn.net:443
        type: string
      message:
        example: Server info retrieved successfully
        type: string
      node_type:
        example: PRIMARY
        type: string
      status:
        example: healthy
        type: string
      web_server_name:
        example: OpenVPN-AS
        type: string
    type: object
  dto.VpnStatusResponse:
    properties:
      connected_users:
        items:
          $ref: '#/definitions/dto.ConnectedUserResponse'
        type: array
      timestamp:
        example: "2025-06-14T15:08:06Z"
        type: string
      total_connected_users:
        example: 5
        type: integer
    type: object
  dto.VpnUpdateGroupRequest:
    properties:
      accessControl:
        items:
          type: string
        type: array
      denyAccess:
        type: boolean
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        enum:
        - User
        - Admin
        type: string
    type: object
  dto.VpnUpdateUserRequest:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      denyAccess:
        example: false
        type: boolean
      groupName:
        example: TEST_GR
        type: string
      ipAddress:
        example: 10.0.0.10
        type: string
      ipAssignMode:
        enum:
        - dynamic
        - static
        example: static
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      userExpiration:
        example: 31/12/2025
        type: string
    type: object
  dto.VpnUserExpirationsResponse:
    properties:
      count:
        type: integer
      days:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserExpirationInfo'
        type: array
    type: object
  dto.VpnUserListResponse:
    properties:
      filters:
        allOf:
        - $ref: '#/definitions/dto.UserFilter'
        description: 'NEW: Applied filters'
      limit:
        example: 20
        type: integer
      metadata:
        allOf:
        - $ref: '#/definitions/dto.FilterMetadata'
        description: 'NEW: Filter metadata'
      page:
        example: 1
        type: integer
      total:
        example: 50
        type: integer
      totalPages:
        description: 'NEW: Total pages'
        example: 3
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.VpnUserResponse:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        example: local
        type: string
      daysUntilExpiration:
        description: Days until expiration (-1 if expired)
        example: 30
        type: integer
      denyAccess:
        example: false
        type: boolean
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      ipAddress:
        example: 10.0.0.10
        type: string
      isEnabled:
        description: 'NEW: Computed fields for enhanced filtering'
        example: true
        type: boolean
      isExpired:
        description: Whether user is past expiration
        example: false
        type: boolean
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      mfa:
        example: true
        type: boolean
      role:
        example: User
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        type: string
    type: object
  entities.AuditLog:
    properties:
      id:
        type: string
      userID:
        type: string
      username:
        type: string
      userGroup:
        type: string
      action:
        type: string
      resourceType:
        type: string
      resourceName:
        type: string
      ipAddress:
        type: string
      success:
        type: boolean
      createdAt:
        type: string
    type: object
  entities.Permission:
    properties:
      action:
        type: string
      description:
        type: string
      id:
        type: string
      resource:
        type: string
    type: object
  entities.PortalGroup:
    properties:
      createdAt:
        type: string
      displayName:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/entities.Permission'
        type: array
      updatedAt:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error:
        properties:
          code:
            type: string
          details: {}
          message:
            type: string
          status:
            type: integer
        type: object
    type: object
  response.SuccessResponse:
    properties:
      success:
        properties:
          data: {}
          message:
            type: string
          status:
            type: integer
        type: object
    type: object
host: localhost:8080
info:
  contact: {}
  description: API quản lý OpenVPN, Authentication, Portal...
  title: System Portal API
  version: "1.0"
paths:
  /api/openvpn/bulk/groups/actions:
    post:
      consumes:
      - application/json
      description: Perform actions on multiple groups (enable/disable)
      parameters:
      - description: Bulk group actions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkGroupActionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnBulkGroupActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk group actions
      tags:
      - Bulk Operations
  /api/openvpn/bulk/groups/create:
    post:
      consumes:
      - application/json
      description: Create multiple groups at once
      parameters:
      - description: Bulk group creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkCreateGroupsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VpnBulkCreateGroupsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create groups
      tags:
      - Bulk Operations
  /api/openvpn/bulk/groups/import:
    post:
      consumes:
      - multipart/form-data
      description: Import groups from CSV, JSON, or XLSX file
      parameters:
      - description: Groups file (CSV/JSON/XLSX)
        in: formData
        name: file
        required: true
        type: file
      - description: File format
        enum:
        - csv
        - json
        - xlsx
        in: formData
        name: format
        type: string
      - description: Dry run mode (validate only)
        in: formData
        name: dryRun
        type: boolean
      - description: Override existing groups
        in: formData
        name: override
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnImportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import groups from file
      tags:
      - Bulk Operations
  /api/openvpn/bulk/groups/template:
    get:
      description: Download template file for group import
      parameters:
      - default: csv
        description: Template format
        enum:
        - csv
        - xlsx
        in: query
        name: format
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Group template file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export group template
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/actions:
    post:
      consumes:
      - application/json
      description: Perform actions on multiple users (enable/disable/reset-otp)
      parameters:
      - description: Bulk user actions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkUserActionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnBulkActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk user actions
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/create:
    post:
      consumes:
      - application/json
      description: Create multiple users at once
      parameters:
      - description: Bulk user creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkCreateUsersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VpnBulkCreateUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "413":
          description: Request too large
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create users
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/disconnect:
    post:
      consumes:
      - application/json
      description: Disconnect multiple users from VPN with business logic validation
        (user exists and is connected)
      parameters:
      - description: Bulk disconnect users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkDisconnectUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users disconnected successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnDisconnectResponse'
              type: object
        "400":
          description: Bad request - validation error or no valid users
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error - failed to disconnect users
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk disconnect multiple VPN users
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/extend:
    post:
      consumes:
      - application/json
      description: Extend expiration date for multiple users
      parameters:
      - description: Bulk user extension data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnBulkUserExtendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnBulkActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk extend user expiration
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/import:
    post:
      consumes:
      - multipart/form-data
      description: Import users from CSV, JSON, or XLSX file
      parameters:
      - description: Users file (CSV/JSON/XLSX)
        in: formData
        name: file
        required: true
        type: file
      - description: File format
        enum:
        - csv
        - json
        - xlsx
        in: formData
        name: format
        type: string
      - description: Dry run mode (validate only)
        in: formData
        name: dryRun
        type: boolean
      - description: Override existing users
        in: formData
        name: override
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnImportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import users from file
      tags:
      - Bulk Operations
  /api/openvpn/bulk/users/template:
    get:
      description: Download template file for user import
      parameters:
      - default: csv
        description: Template format
        enum:
        - csv
        - xlsx
        in: query
        name: format
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: User template file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export user template
      tags:
      - Bulk Operations
  /api/openvpn/config/network:
    get:
      description: Get comprehensive network configuration including client networks,
        VPN daemon settings, routing, and NAT configuration
      produces:
      - application/json
      responses:
        "200":
          description: Network configuration retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnNetworkConfigResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve network config
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get network configuration
      tags:
      - Configuration
  /api/openvpn/config/server/info:
    get:
      description: Get basic server information including node type, ports, and cluster
        configuration
      produces:
      - application/json
      responses:
        "200":
          description: Server information retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnServerInfoResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve server info
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get server information
      tags:
      - Configuration
  /api/openvpn/groups:
    get:
      consumes:
      - application/json
      description: List groups with pagination and filtering
      parameters:
      - in: query
        name: authMethod
        type: string
      - in: query
        name: groupName
        type: string
      - in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnGroupListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a new VPN user group
      parameters:
      - description: Group creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnCreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - Groups
  /api/openvpn/groups/{groupName}:
    delete:
      description: Delete group by name
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete group
      tags:
      - Groups
    get:
      description: Get group information by name
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnGroupResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get group by name
      tags:
      - Groups
    put:
      consumes:
      - application/json
      description: Update group information
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Group update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnUpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update group
      tags:
      - Groups
  /api/openvpn/groups/{groupName}/{action}:
    put:
      consumes:
      - application/json
      description: Enable or disable a group
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Action (enable/disable)
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Perform action on group
      tags:
      - Groups
  /api/openvpn/users:
    get:
      description: Get a paginated list of users with comprehensive filtering options
      parameters:
      - description: Filter by username (supports partial match)
        in: query
        name: username
        type: string
      - description: Filter by email (supports partial match)
        in: query
        name: email
        type: string
      - description: Filter by auth method
        enum:
        - ldap
        - local
        in: query
        name: authMethod
        type: string
      - description: Filter by role
        enum:
        - Admin
        - User
        in: query
        name: role
        type: string
      - description: Filter by group name
        in: query
        name: groupName
        type: string
      - description: Filter by enabled status
        in: query
        name: isEnabled
        type: boolean
      - description: Filter by access denial status
        in: query
        name: denyAccess
        type: boolean
      - description: Filter by MFA status
        in: query
        name: mfaEnabled
        type: boolean
      - description: Users expiring after date (YYYY-MM-DD)
        in: query
        name: userExpirationAfter
        type: string
      - description: Users expiring before date (YYYY-MM-DD)
        in: query
        name: userExpirationBefore
        type: string
      - default: true
        description: Include expired users
        in: query
        name: includeExpired
        type: boolean
      - description: Users expiring within X days
        in: query
        name: expiringInDays
        type: integer
      - description: Filter by access control presence
        in: query
        name: hasAccessControl
        type: boolean
      - description: Filter by MAC address
        in: query
        name: macAddress
        type: string
      - description: Filter by IP address
        in: query
        name: ipAddress
        type: string
      - description: Search across username, email, group
        in: query
        name: searchText
        type: string
      - default: username
        description: Sort field
        enum:
        - username
        - email
        - authMethod
        - role
        - groupName
        - userExpiration
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page (max 100)
        in: query
        name: limit
        type: integer
      - default: false
        description: Use exact matching instead of partial
        in: query
        name: exactMatch
        type: boolean
      - default: false
        description: Case sensitive search
        in: query
        name: caseSensitive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnUserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users with enhanced filtering
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new VPN user (local or LDAP authentication)
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/openvpn/users/{username}:
    delete:
      description: Delete a user and associated resources
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get detailed information about a user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by username
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /api/openvpn/users/{username}/{action}:
    put:
      consumes:
      - application/json
      description: Perform actions like enable, disable, reset-otp, change-password
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Action
        enum:
        - enable
        - disable
        - reset-otp
        - change-password
        in: path
        name: action
        required: true
        type: string
      - description: Required only for change-password action
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.VpnChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Perform user action
      tags:
      - Users
  /api/openvpn/users/{username}/disconnect:
    post:
      consumes:
      - application/json
      description: Disconnect a specific user from VPN with business logic validation
        (user exists and is connected)
      parameters:
      - description: Username to disconnect
        in: path
        name: username
        required: true
        type: string
      - description: Disconnect user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VpnDisconnectUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User disconnected successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnDisconnectResponse'
              type: object
        "400":
          description: Bad request - user not found or not connected
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found in system
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error - failed to disconnect user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disconnect a single VPN user
      tags:
      - Users
  /api/openvpn/users/expirations:
    get:
      description: Get users that will expire in the specified number of days with
        complete user details
      parameters:
      - default: 7
        description: Number of days to check for expiration
        in: query
        name: days
        type: integer
      - default: false
        description: Include already expired users
        in: query
        name: includeExpired
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VpnUserExpirationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get expiring users with full information
      tags:
      - Users
  /api/openvpn/vpn/status:
    get:
      description: Get detailed VPN server status including all connected users with
        their public IPs, connection times, countries, and traffic statistics
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with VPN status
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VpnStatusResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve VPN status
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get comprehensive VPN server status
      tags:
      - VPN Status
  /api/portal/audit/logs:
    get:
      parameters:
      - in: query
        name: username
        type: string
      - in: query
        name: group
        type: string
      - in: query
        name: ip
        type: string
      - in: query
        name: from
        type: string
      - in: query
        name: to
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.AuditLog'
            type: array
      security:
      - BearerAuth: []
      summary: List audit logs
      tags:
      - Audit
  /api/portal/audit/logs/export:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: not implemented
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Export audit logs
      tags:
      - Audit
  /api/portal/audit/stats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: not implemented
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Audit statistics
      tags:
      - Audit
  /api/portal/dashboard/activities:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AuditResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Recent activities
      tags:
      - Dashboard
  /api/portal/dashboard/charts/activities:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Activity chart data
      tags:
      - Dashboard
  /api/portal/dashboard/charts/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: User chart data
      tags:
      - Dashboard
  /api/portal/dashboard/stats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StatsResponse'
      security:
      - BearerAuth: []
      summary: Dashboard statistics
      tags:
      - Dashboard
  /api/portal/groups:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.PortalGroup'
            type: array
      security:
      - BearerAuth: []
      summary: List portal groups
      tags:
      - Portal Groups
    post:
      consumes:
      - application/json
      parameters:
      - description: Group data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.PortalGroup'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create portal group
      tags:
  - Portal Groups
  /api/portal/groups/{id}:
    get:
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.PortalGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get portal group
      tags:
      - Portal Groups
  /api/portal/groups/{id}/permissions:
    get:
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/entities.Permission'
      security:
      - BearerAuth: []
      summary: Get permissions for a group
      tags:
      - Permissions
    put:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission IDs
        in: body
        name: request
        required: true
        schema:
          type: object
          properties:
            permission_ids:
              type: array
              items:
                type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update group permissions
      tags:
      - Permissions
  /api/portal/permissions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Permission'
            type: array
      security:
      - BearerAuth: []
      summary: List permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      parameters:
      - description: Permission data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.Permission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create permission
      tags:
      - Permissions
  /api/portal/permissions/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.Permission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update permission
      tags:
      - Permissions
    delete:
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete permission
      tags:
      - Permissions
  /api/portal/users:
    get:
      description: Retrieve all portal users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PortalUserResponse'
            type: array
      security:
      - BearerAuth: []
      summary: List portal users
      tags:
      - Portal Users
    post:
      consumes:
      - application/json
      description: Create a new portal user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PortalUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create portal user
      tags:
      - Portal Users
  /api/portal/users/{id}:
    delete:
      description: Remove a portal user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete portal user
      tags:
      - Portal Users
    get:
      description: Get portal user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PortalUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get portal user
      tags:
      - Portal Users
    put:
      consumes:
      - application/json
      description: Update information for a portal user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PortalUserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update portal user
      tags:
      - Portal Users
  /api/portal/users/{id}/activate:
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Activate portal user
      tags:
      - Portal Users
  /api/portal/users/{id}/deactivate:
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Deactivate portal user
      tags:
      - Portal Users
  /api/portal/users/{id}/reset-password:
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Reset portal user password
      tags:
      - Portal Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and issue JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Invalidate the current session
      produces:
      - application/json
      responses:
        "200":
          description: logged out
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Issue a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/validate:
    get:
      description: Validate an access token
      produces:
      - application/json
      responses:
        "200":
          description: token valid
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate token
      tags:
      - Authentication
swagger: "2.0"
